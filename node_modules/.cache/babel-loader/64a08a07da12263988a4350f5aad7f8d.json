{"ast":null,"code":"import _slicedToArray from \"/Users/mamad/Desktop/it-logger-master/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mamad/Desktop/it-logger-master/src/components/logs/Logs.js\";\n// import React, { useEffect } from 'react';\n// import { connect } from 'react-redux';\n// import LogItem from './LogItem';\n// import Preloader from '../layout/Preloader';\n// import PropTypes from 'prop-types';\n// import { getLogs } from '../../actions/logActions';\n// const Logs = ({ log: { logs, loading }, getLogs }) => {\n//   useEffect(() => {\n//     getLogs();\n//     // eslint-disable-next-line\n//   }, []);\n//   if (loading || logs === null) {\n//     return <Preloader />;\n//   }\n//   return (\n//     <ul className='collection with-header'>\n//       <li className='collection-header'>\n//         <h4 className='center'>System Logs</h4>\n//       </li>\n//       {!loading && logs.length === 0 ? (\n//         <p className='center'>No logs to show...</p>\n//       ) : (\n//         logs.map(log => <LogItem log={log} key={log.id} />)\n//       )}\n//     </ul>\n//   );\n// };\n// Logs.propTypes = {\n//   log: PropTypes.object.isRequired,\n//   getLogs: PropTypes.func.isRequired\n// };\n// const mapStateToProps = state => ({\n//   log: state.log\n// });\n// export default connect(\n//   mapStateToProps,\n//   { getLogs }\n// )(Logs);\nimport React, { useState, useEffect } from 'react';\nexport const Logs = () => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        logs = _useState2[0],\n        setLogs = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        loading = _useState4[0],\n        setLoading = _useState4[1];\n\n  useEffect(() => {\n    // GET request using axios inside useEffect React hook\n    axios.get('/logs').then(response => setTotalReactPackages(response.data.total)); // empty dependency array means this effect will only run once (like componentDidMount in classes)\n  }, []);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/mamad/Desktop/it-logger-master/src/components/logs/Logs.js"],"names":["React","useState","useEffect","Logs","logs","setLogs","loading","setLoading","axios","get","then","response","setTotalReactPackages","data","total"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,QAAwC,OAAxC;AAGA,OAAO,MAAMC,IAAI,GAAG,MAAM;AAAA,oBAGHF,QAAQ,CAAC,EAAD,CAHL;AAAA;AAAA,QAGjBG,IAHiB;AAAA,QAGZC,OAHY;;AAAA,qBAICJ,QAAQ,CAAC,KAAD,CAJT;AAAA;AAAA,QAInBK,OAJmB;AAAA,QAIXC,UAJW;;AAM1BL,EAAAA,SAAS,CAAC,MAAM;AACd;AACAM,IAAAA,KAAK,CAACC,GAAN,CAAU,OAAV,EACKC,IADL,CACUC,QAAQ,IAAIC,qBAAqB,CAACD,QAAQ,CAACE,IAAT,CAAcC,KAAf,CAD3C,EAFc,CAKhB;AACC,GANQ,EAMN,EANM,CAAT;AAQE,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAKD,CAnBM","sourcesContent":["// import React, { useEffect } from 'react';\n// import { connect } from 'react-redux';\n// import LogItem from './LogItem';\n// import Preloader from '../layout/Preloader';\n// import PropTypes from 'prop-types';\n// import { getLogs } from '../../actions/logActions';\n\n// const Logs = ({ log: { logs, loading }, getLogs }) => {\n//   useEffect(() => {\n//     getLogs();\n//     // eslint-disable-next-line\n//   }, []);\n\n//   if (loading || logs === null) {\n//     return <Preloader />;\n//   }\n\n//   return (\n//     <ul className='collection with-header'>\n//       <li className='collection-header'>\n//         <h4 className='center'>System Logs</h4>\n//       </li>\n//       {!loading && logs.length === 0 ? (\n//         <p className='center'>No logs to show...</p>\n//       ) : (\n//         logs.map(log => <LogItem log={log} key={log.id} />)\n//       )}\n//     </ul>\n//   );\n// };\n\n// Logs.propTypes = {\n//   log: PropTypes.object.isRequired,\n//   getLogs: PropTypes.func.isRequired\n// };\n\n// const mapStateToProps = state => ({\n//   log: state.log\n// });\n\n// export default connect(\n//   mapStateToProps,\n//   { getLogs }\n// )(Logs);\n\nimport React , {useState,useEffect}from 'react';\n\n\nexport const Logs = () => {\n\n\n  const [logs,setLogs]=useState([])\nconst [loading,setLoading]=useState(false);\n\nuseEffect(() => {\n  // GET request using axios inside useEffect React hook\n  axios.get('/logs')\n      .then(response => setTotalReactPackages(response.data.total));\n\n// empty dependency array means this effect will only run once (like componentDidMount in classes)\n}, []);\n\n  return (\n    <div>\n      \n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}